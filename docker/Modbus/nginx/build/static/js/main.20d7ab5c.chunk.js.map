{"version":3,"sources":["Constants.ts","api/ParsedDataService.ts","components/ModbusReadable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["API_URL","id","axios","get","ModbusReadable","state","count","ParsedData","negativeEnergyAccumulator","signalQuality","noOfRegisters","interval","setInterval","intervalLog","console","log","ParsedDataService","getNoOfRegisters","then","res","setState","data","this","retrieveParsedData","countUpdate","updatePage","clearInterval","updateCount","parsedData","React","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAAaA,EAAU,iDCaR,M,2GATMC,GACjB,OAAOC,IAAMC,IAAN,UAAaH,EAAb,qBAAiCC,M,yCAIxC,OAAOC,IAAMC,IAAN,UAAaH,EAAb,yB,MC6DII,E,4MAhEbC,MAAQ,CACNC,MAAO,EACPC,WAAY,CACVC,0BAA2B,EAC3BC,cAAe,GAEjBC,cAAe,EACfC,SAAUC,YAAY,EAAKC,YAAa,M,4DAIxCC,QAAQC,IAAI,yB,mCAGD,IAAD,OACVC,EAAkBC,mBACjBC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAACV,cAAeS,EAAIE,UAGpC,IAAMf,EAAQgB,KAAKjB,MAAMC,MACzBU,EAAkBO,mBAAmBjB,GACpCY,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAACb,WAAWY,EAAIE,UAGhCC,KAAKE,gB,0CAGa,IAAD,OACjBF,KAAKjB,MAAMM,SAAWC,aAAY,WAChC,EAAKa,eACJ,O,6CAIHC,cAAcJ,KAAKjB,MAAMM,Y,oCAIzB,GAAGW,KAAKjB,MAAMC,OAASgB,KAAKjB,MAAMK,cAChCY,KAAKF,SAAS,CAACd,MAAO,QACjB,CACL,IAAIqB,EAAcL,KAAKjB,MAAMC,MAC7BqB,IACAL,KAAKF,SAAS,CAACd,MAAOqB,O,+BAKxB,IAAIC,EAEJ,OADAA,EAAaN,KAAKjB,MAAME,WAEtB,gCACE,uBAEA,qDACA,8DAAiCqB,EAAWpB,6BAC5C,iDAAoBoB,EAAWnB,wB,GA5DVoB,IAAMC,WCQpBC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.20d7ab5c.chunk.js","sourcesContent":["export const API_URL = 'http://localhost:8080/modbusparserservices/api';","import axios from 'axios';\nimport { API_URL } from '../Constants';\n\nclass ParsedDataService {\n  retrieveParsedData(id: number){\n    return axios.get(`${API_URL}/register/${id}`);\n  } \n\n  getNoOfRegisters(){\n    return axios.get(`${API_URL}/no-of-registers`);\n  }\n}\n\nexport default new ParsedDataService()","import React from 'react';\nimport ParsedDataService from '../api/ParsedDataService'; \nimport ParsedData from '../interfaces/ParsedData.interface';\n\nclass ModbusReadable extends React.Component{\n\n  state = {\n    count: 1,\n    ParsedData: {\n      negativeEnergyAccumulator: 0,\n      signalQuality: 0\n    }, \n    noOfRegisters: 0,\n    interval: setInterval(this.intervalLog, 100)\n  }\n\n  intervalLog(){\n    console.log(\"setting interval...\");\n  }\n\n  updatePage(){\n    ParsedDataService.getNoOfRegisters()\n    .then(res => {\n      this.setState({noOfRegisters: res.data})\n    })\n\n    const count = this.state.count; \n    ParsedDataService.retrieveParsedData(count)\n    .then(res => {\n      this.setState({ParsedData:res.data});\n    }) \n\n    this.countUpdate();\n  }\n\n  componentDidMount(){\n    this.state.interval = setInterval(() => {\n      this.updatePage();\n    }, 2000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.interval);\n  }\n\n  countUpdate(){\n    if(this.state.count >= this.state.noOfRegisters){\n      this.setState({count: 1});\n    } else {\n      let updateCount = this.state.count; \n      updateCount++;\n      this.setState({count: updateCount})\n    }\n  }\n\n  render(){\n    let parsedData: ParsedData;\n    parsedData = this.state.ParsedData; \n    return(\n      <div>\n        <br/>\n        \n        <p>The current values: </p>\n        <p>Negative Energy Accumulator: {parsedData.negativeEnergyAccumulator}</p>\n        <p>Signal Quality: {parsedData.signalQuality}</p>\n      </div>\n    )\n  }\n}\n\nexport default ModbusReadable; \n\n/*\n  componentDidUpdate(prevProps: any, prepState: any){\n    if(this.state.count !== prepState.count){\n      this.updatePage()\n    }\n  } \n\n<button onClick={() => this.countUpdate()}>Update values</button>\n*/","import React from 'react';\nimport './App.css';\nimport ModbusReadable from './components/ModbusReadable';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ModbusReadable/>\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
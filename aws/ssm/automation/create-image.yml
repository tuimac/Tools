description: Create Image
schemaVersion: '0.3'
parameters:
  InstanceHostname:
    type: String
    description: (Required)
  Retention:
    type: String
    description: (Required)
mainSteps:
  - name: GetDeleteImageId
    action: aws:executeScript
    timeoutSeconds: 3600
    onFailure: Abort
    inputs:
      Runtime: python3.8
      Handler: handler
      InputPayload:
        InputPayload:
          Hostname: '{{ InstanceHostname }}'
          Retention: '{{ Retention }}'
      Script: |-
        import boto3
        def handler(events, context):
          # Initialization
          hostname = events['Hostname']
          retention = events['Retention']
          ec2 = boto3.client('ec2')
          target_images = []

          # Get target images information
          images = ec2.describe_images(
            Owner = ['self'],
            Filters = [{
              'Name': 'tag:HostName',
              'Values': [hostname]
            }]
          )['Images']

          # Extract target images over the retention
          images.sort(key=lambda sort_key: sort_key.get('CreationDate'), reverse=True)
          return {'DeleteTargets': images[retention:]}
    outputs:
      - Name: DeleteTargets
        Selector: $.Payload.DeleteTargets
        Type: StringList
    nextStep: DeleteImages
  - name: DeleteImages
    action: aws:executeScript
    timeoutSeconds: 3600
    onFailure: Abort
    inputs:
      Runtime: python3.8
      Handler: handler
      InputPayload:
        InputPayload:
          DeleteTargets: '{{ GetDeleteImageId.DeleteTargets }}'
      Script: |-
        import boto3
        import time
        def handler(event, context):
          # Initialization
          targets = events['DeleteTargets']
          ssm = boto3.client('ssm')
          execution_ids = []

          # Execute deleteImage automation
          for target in targets:
            execution_ids.append(ssm.start_automation_execution(
              DocumentName = 'AWS-DeleteImage',
              Parameters = {
                'ImageId': [target['ImageId']] 
              }
            )['AutomationExecutionId'])
            time.sleep(1)
          
          # Confirm automation execution status
          while true:
            results = ssm.describe_automation_executions(
              Filters = [
                {
                  'Key': 'ExecutionId',
                  'Values': execution_ids
                },
                {
                  'Key': 'ExecutionStatus',
                  'Values': ['Success']
                }
              ]
            )['AutomationExecutionMetadataList']
            if len(execution_ids) == len(results):
              break
          return True
    nextStep: GetInstanceId
  - name: GetInstanceId
    action: 'aws:executeAwsApi'
    inputs:
      Service: ec2
      Api: DescribeInstances
      Filters:
        - Name: 'tag:Hostname'
          Values: ['{{ InstanceHostname }}']
    outputs:
      - Name: InstanceId
        Selector: '$.Reservations[0].Instances[0].InstanceId'
        Type: String
  - name: CreateImage
    action: aws:createImage
    maxAttempts: 3
    onFailure: Abort
    inputs:
      InstanceId: '{{ GetInstanceId.InstanceId }}'
      ImageName: !Sub $InstanceHostname-{{ global:DATE_TIME }}
      NoReboot: false
      ImageDescription: Created by Automation
    outputs:
      - Name: ImageId
        Type: String
  - name: PutTags
    action: aws:createTags
    maxAttempts: 3
    onFailure: Abort
    inputs:
      ResourceType: EC2
      ResourceIds:
        - '{{ CreateImage.ImageId }}'
      Tags:
        - Key: Hostname
          Value: '{{ InstanceHostname }}'
        - Key: Name
          Value: !Sub $InstanceHostname-{{ global:DATE_TIME }}

description: Recreate EC2 instances
schemaVersion: '0.3'
parameters:
  EC2InstanceID:
    type: String
    description: (Required) Target EC2 Instance ID
mainSteps:
  - name: GetNameTag
    action: aws:executeScript
    timeoutSeconds: 3600
    onFailure: Abort
    inputs:
      Runtime: python3.8
      Handler: handler
      InputPayload:
        EC2InstanceId: '{{ EC2InstanceID  }}'
      Script: |-
        import boto3
        def handler(events, context):
          instance_id = events['EC2InstanceId']
          ec2 = boto3.client('ec2')
          return [ tag['Value'] for tag in ec2.describe_instances(InstanceIds=[instance_id])['Reservations'][0]['Instances'][0]['Tags'] if tag['Key'] == 'Name' ][0]
    outputs:
      - Name: InstanceNameTag
        Selector: $.Payload
        Type: String
    nextStep: CreateImage
  - name: CreateImage
    action: 'aws:createImage'
    maxAttempts: 3
    onFailure: Abort
    inputs:
      InstanceId: '{{ EC2InstanceID }}'
      ImageName: '{{ GetNameTag.InstanceNameTag }}_{{ global:DATE_TIME }}'
      NoReboot: true
      ImageDescription: Before recreating EC2 instance
    outputs:
      - Name: AmiId
        Selector: $.ImageId
        Type: String
    nextStep: CreateLaunchTemplate
  - name: CreateLaunchTemplate
    action: 'aws:executeScript'
    onFailure: Abort
    inputs:
      Runtime: python3.8
      Handler: handler
      InputPayload:
        InstanceName: '{{ GetNameTag.InstanceNameTag }}'
        EC2InstanceId: '{{ EC2InstanceID }}'
        ImageId: '{{ CreateImage.AmiId }}'
      Script: |-
        import boto3
        import json

        def handler(events, context):
          name_tag = events['InstanceName']
          instance_id = events['EC2InstanceId']
          image_id = events['ImageId']
          tag_info = {}

          ec2 = boto3.client('ec2')
          # Get Information
          instance_data = ec2.get_launch_template_data(InstanceId = instance_id)['LaunchTemplateData']
          template_info = ec2.describe_launch_templates(
              Filters = [
                  { 'Name': 'launch-template-name', 'Values': [name_tag] }
              ]
          )['LaunchTemplates']
          
          # Update template information
          instance_data['ImageId'] = image_id
          devices = ec2.describe_images(ImageIds=[image_id])['Images'][0]['BlockDeviceMappings']
          instance_data['BlockDeviceMappings'] = []
          for device in devices:
              if 'Ebs' in device:
                  instance_data['BlockDeviceMappings'].append(device)
          
          # Get the tag information
          instance_detail = ec2.describe_instances(InstanceIds = [instance_id])['Reservations'][0]['Instances'][0]
          ## AMI Tag
          tag_info['image'] = image_id

          ## EBS Tag
          volume_id_list = [volume['Ebs']['VolumeId'] for volume in instance_detail['BlockDeviceMappings']]
          volume_details = ec2.describe_volumes(VolumeIds = volume_id_list)
          tag_info['volume'] = []
          for detail in volume_details['Volumes']:
              try:
                  tag_info['volume'] = { detail['Attachments'][0]['Device']: detail['Tags'] }
              except:
                  pass

          ## Network Interfaces Tag
          nic_id_list = [nic['NetworkInterfaceId'] for nic in instance_detail['NetworkInterfaces']]
          nic_details = ec2.describe_network_interfaces(NetworkInterfaceIds = nic_id_list)
          tag_info['nic'] = []
          for detail in nic_details['NetworkInterfaces']:
              try:
                  tag_info['nic'] = { detail['Attachment']['DeviceIndex']: detail['TagSet'] }
              except:
                  pass

          if len(template_info) == 0:
              ec2.create_launch_template(
                  LaunchTemplateName = name_tag,
                  VersionDescription = json.dumps(tag_info),
                  LaunchTemplateData = instance_data
              )
          else:
              version = ec2.create_launch_template_version(
                  LaunchTemplateName = name_tag,
                  VersionDescription = json.dumps(tag_info),
                  LaunchTemplateData = instance_data
              )['LaunchTemplateVersion']['VersionNumber']
              ec2.modify_launch_template(
                  LaunchTemplateName = name_tag,
                  DefaultVersion = str(version)
              )
          return tag_info
    outputs:
      - Name: TagInfo
        Selector: $.Payload
        Type: StringMap
    nextStep: DeleteInstance
  - name: DeleteInstance
    action: 'aws:changeInstanceState'
    maxAttempts: 3
    timeoutSeconds: 3600
    onFailure: Abort
    inputs:
      InstanceIds:
        - '{{ EC2InstanceID }}'
      DesiredState: terminated
    nextStep: CreateEC2Instance
  - name: CreateEC2Instance
    action: 'aws:executeAwsApi'
    inputs:
      Service: ec2
      Api: RunInstances
      LaunchTemplate:
        LaunchTemplateName: '{{ GetNameTag.InstanceNameTag }}'
      MaxCount: 1
      MinCount: 1
    outputs:
      - Name: InstanceId
        Selector: $.InstanceIds
        Type: StringList
    nextStep: CreateTags
  - name: CreateTags
    action: aws:executeScript
    timeoutSeconds: 3600
    onFailure: Abort
    inputs:
      Runtime: python3.8
      Handler: handler
      InputPayload:
        EC2InstanceId: '{{ CreateEC2Instance.InstanceId }}'
        TagData: '{{ CreateLaunchTemplate.TagInfo }}'
      Script: |-
        import boto3
        def handler(events, context):
            instance_id = events['EC2InstanceId'][0]
            tag_data = events['TagData']
            ec2 = boto3.client('ec2')
            ec2_info = ec2.describe_instances(InstanceIds=[instance_id])['Reservations'][0]['Instances'][0]
            # AMI tag
            image_name = ec2.describe_images(ImageIds=[tag_data['image']])['Images'][0]['Name']
            ec2.create_tags(
                Resources = [tag_data['image']],
                Tags = [{ 'Key': 'Name', 'Value': image_name }]
            )

            # Volume tag
            for target in tag_data['volume']:
                for device_info in ec2_info['BlockDeviceMappings']:
                    if target == device_info['DeviceName']:
                        ec2.create_tags(
                            Resources = [device_info['Ebs']['VolumeId']],
                            Tags = tag_data['volume'][target]
                        )

            # Network Interface tag
            for target in tag_data['nic']:
                for nic_info in ec2_info['NetworkInterfaces']:
                    if target == str(nic_info['Attachment']['DeviceIndex']):
                        ec2.create_tags(
                            Resources = [nic_info['NetworkInterfaceId']],
                            Tags = tag_data['nic'][target]
                        )

description: Recreate EC2 instances
schemaVersion: '0.3'
assumeRole: 
parameters:
  EC2InstanceID:
    type: String
    description: (Required) Target EC2 Instance ID
mainSteps:
  - name: GetNameTag
    action: aws:executeScript
    timeoutSeconds: 3600
    onFailure: Abort
    inputs:
      Runtime: python3.8
      Handler: handler
      InputPayload:
        EC2InstanceId: '{{ EC2InstanceID  }}'
      Script: |-
        import boto3
        def handler(events, context):
          ec2 = boto3.client('ec2')
          return [ tag['Value'] for tag in ec2.describe_instances(InstanceIds=[instance_id])['Reservations'][0]['Instances'][0]['Tags'] if tag['Key'] == 'Name' ][0]
    outputs:
      - Name: NameTag
        Selector: $.Payload
        Type: String
    nextStep: CreateImage
  - name: CreateImage
    action: 'aws:createImage'
    maxAttempts: 3
    onFailure: Abort
    inputs:
      InstanceId: '{{ EC2InstanceID }}'
      ImageName: '{{ GetNameTag.NameTag }}-{{ global: DATE_TIME }}'
      NoReboot: true
      ImageDescription: Before recreating EC2 instance
    outputs:
      - Name: ImageId
        Selector: $.ImageId
        Type: String
    nextStep: CreateLaunchTemplate
  - name: CreateLaunchTemplate
    action: 'aws:executeScript'
    onFailure: Abort
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        InstanceName: '{{ InstanceName }}'
        InstanceId: '{{ EC2InstanceID }}'
        ImageId: '{{ CreateImage.ImageId }}'
      Script: |-
        import boto3
        import datetime
        import botocore

        def handler(events, context):
          name_tag = events['InstanceName']
          instance_id = events['InstanceId']
          image_id = events['ImageId']
          print(name_tag)
          print(instance_id)
          print(image_id)

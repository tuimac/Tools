AWSTemplateFormatVersion: 2010-09-09
Description: When EC2 instances is created or terminated, put the Name tag value to Route53 records

Parameters:
  HostedZoneID:
    Type: String
    Default: ''

  Domain:
    Type: String
    Default: tuimac.com

  ExcludedHostnameList:
    Type: String
    Default: home

  CloudwatchLogsName:
    Type: String
    Default: tagrouter53

  TagKey:
    Type: String
    Default: Name

  TagValue:
    Type: String
    Default: tagroute53

Resources:
  LambdaCloudwatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref TagValue
      RetentionInDays: 1
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  TagRoute53LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref TagValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Ref TagValue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Sid: UpdateRecordsInTargetHostedZone
                Action:
                  - 'route53:ChangeResourceRecordSets'
                  - 'route53:ListResourceRecordSets'
                Resource: !Join
                  - ''
                  - - arn:aws:route53:::hostedzone/
                    - !Ref HostedZoneID
              - Effect: Allow
                Sid: GetECInstancesTags
                Action:
                  - 'ec2:DescribeInstances'
                Resource: '*'
              - Effect: Allow
                Sid: LambdaRuntimeLog
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !GetAtt LambdaCloudwatchLogGroup.Arn
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  TagRoute53Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Timeout: 60
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt TagRoute53LambdaRole.Arn
      FunctionName: !Ref TagValue
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
      Environment:
        Variables:
          HOSTED_ZONE_ID: !Ref HostedZoneID
          DOMAIN: !Ref Domain
          EXCLUDE_HOSTNAME_LIST: !Ref ExcludedHostnameList
      Code:
        ZipFile: |
          import boto3
          import traceback
          import re
          import os

          def validate_name_tag_value(name_tag_value) -> str:
            name_tag_value = name_tag_value.lower()
            fqdn_regex = '((?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9-])*(\.[a-zA-Z-]{2,63})*$))'

            if name_tag_value in os.environ['EXCLUDE_HOSTNAME_LIST']:
              raise Exception(name_tag_value + ' is in excluded list!!')

            if re.match(fqdn_regex, name_tag_value):
              return name_tag_value
            else:
              raise Exception('The format of Name Tag is wrong!!')

          def get_ec2instance_info(instance_id, ec2) -> dict:
            result = dict()
            reservations = ec2.describe_instances(
              InstanceIds = [instance_id]
            )['Reservations']

            for reservation in reservations:
              for instance in reservation['Instances']:
                for tag in instance['Tags']:
                  if tag['Key'] == 'Name':
                    name_tag_value = tag['Value']
                    break
            result['private_ip'] = instance['NetworkInterfaces'][0]['PrivateIpAddress']
            try:
              result['public_ip'] = instance['NetworkInterfaces'][0]['Association']['PublicIp']
            except:
              traceback.print_exc()
              pass

            result['tag'] = name_tag_value

            return result

          def validate_recordset(tag, hosted_zone_id, route53):
            target_fqdn = tag + '.' + os.environ['DOMAIN'] + '.'

            records = route53.list_resource_record_sets(
              HostedZoneId = os.environ['HOSTED_ZONE_ID']
            )['ResourceRecordSets']
            for record in records:
              if record['Name'] == target_fqdn and record['Type'] == 'A':
                raise Exception('There is same hostname!!')

          def add_record(tag, hosted_zone_id, info, route53):
            route53.change_resource_record_sets(
              HostedZoneId = os.environ['HOSTED_ZONE_ID'],
              ChangeBatch = {
                'Changes': [
                  {
                    'Action': 'UPSERT',
                    'ResourceRecordSet': {
                      'Name': tag + '.private.' + os.environ['DOMAIN'],
                      'Type': 'A',
                      'TTL': 30,
                      'ResourceRecords': [
                        {'Value': info['private_ip']}
                      ]
                    }
                  }
                ]
              }
            )
            if 'public_ip' in info:
              route53.change_resource_record_sets(
                HostedZoneId = os.environ['HOSTED_ZONE_ID'],
                ChangeBatch = {
                  'Changes': [
                    {
                      'Action': 'UPSERT',
                      'ResourceRecordSet': {
                        'Name': tag + '.' + os.environ['DOMAIN'],
                        'Type': 'A',
                        'TTL': 30,
                        'ResourceRecords': [
                          {'Value': info['public_ip']}
                        ]
                      }
                    }
                  ]
                }
              )

          def delete_record(tag, hosted_zone_id, info, route53):
            route53.change_resource_record_sets(
              HostedZoneId = os.environ['HOSTED_ZONE_ID'],
              ChangeBatch = {
                'Changes': [
                  {
                    'Action': 'DELETE',
                    'ResourceRecordSet': {
                      'Name': tag + '.private.' + HOSTED_ZONE,
                      'Type': 'A',
                      'TTL': 30,
                      'ResourceRecords': [
                        {'Value': info['private_ip']}
                      ]
                    }
                  }
                ]
              }
            )
            route53.change_resource_record_sets(
              HostedZoneId = os.environ['HOSTED_ZONE_ID'],
              ChangeBatch = {
                'Changes': [
                  {
                    'Action': 'DELETE',
                    'ResourceRecordSet': {
                      'Name': tag + '.' + os.environ['DOMAIN'],
                      'Type': 'A',
                      'TTL': 30,
                      'ResourceRecords': [
                        {'Value': info['public_ip']}
                      ]
                    }
                  }
                ]
              }
            )

          def lambda_handler(event, context):
            try:
              ec2 = boto3.client('ec2')
              route53 = boto3.client('route53')
              state = event['detail']['state']
              instance_id = event['detail']['instance-id']

              info = get_ec2instance_info(instance_id, ec2)
              tag = validate_name_tag_value(info['tag'])

              if state == 'running':
                validate_recordset(tag, hosted_zone_id, route53)
                add_record(tag, hosted_zone_id, info, route53)
              elif state == 'shutting-down':
                delete_record(tag, hosted_zone_id, info, route53)
              else:
                raise Exception('"' + state + '" is wrong!!')
            except:
              traceback.print_exc()

  TagRoute53EventRole:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      Name: !Ref TagValue
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - 'EC2 Instance State-change Notification'
        detail:
          state:
            - running
            - shutting-down
      State: ENABLED
      Targets:
        - Arn: !GetAtt TagRoute53Lambda.Arn
          Id: !Select 
            - 2
            - !Split
              - '/'
              - !Ref AWS::StackId

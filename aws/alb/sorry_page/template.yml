AWSTemplateFormatVersion: 2010-09-09
Description: Create RedHat Enterprise Linux 389 directory service replication environment

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/27

  SubnetACidr:
    Type: String
    Default: 10.0.0.0/28

  SubnetBCidr:
    Type: String
    Default: 10.0.0.16/28

  AMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: Latest Amazon Linux 2 AMI

  SSHPemFilename:
    Type: String
    Default: tuimac

  TagKey:
    Type: String
    Default: Name

  TagValue:
    Type: String
    Default: alb-sorry

Resources:
  # VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
 
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  # Subnet
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetACidr
      AvailabilityZone: ap-northeast-3a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetBCidr
      AvailabilityZone: ap-northeast-3b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  # RouteTable
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTableAccociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  RouteTableAccociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref TagValue
      GroupDescription: for test
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref VpcCidr
          Description: ANY
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: ANY
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  # Endpoint
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: '{
        "Version": "2012-10-17",
        "Statement":[{
          "Effect": "Allow",
          "Principal": "*",
          "Action": "*",
          "Resource": "*"
        }]
      }'
      RouteTableIds:
        - !Ref RouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref Vpc

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2InstanceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EC2InstancePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:*"
                  - "s3:*"
                Resource:
                  - "*"
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2InstanceRole

  # EC2 Instance
  Primary1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIID
      InstanceType: t3.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          Description: Primary1 ENI
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetA
          DeviceIndex: 0
      IamInstanceProfile: !Ref EC2InstanceProfile
      SourceDestCheck: false
      KeyName: !Ref SSHPemFilename
      Tags:
        - Key: Name
          Value: primary1
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            LOG=/var/log/user-data.log
            touch $LOG
            exec >> $LOG 2>&1
              yum update -y
              yum install -y docker git
              mkdir -p /etc/vim/undo
              mkdir -p /etc/vim/backup
              rm /etc/vimrc
              curl -L https://raw.githubusercontent.com/tuimac/tools/master/vim/vimrc -o /etc/vimrc
              chmod -R 777 /etc/vim
              echo 'if [ -n "$BASH_VERSION" -o -n "$KSH_VERSION" -o -n "$ZSH_VERSION" ]; then
                [ -x /usr/bin/id ] || return
                ID=`/usr/bin/id -u`
                #[ -n "$ID" -a "$ID" -le 200 ] && return
                # for bash and zsh, only if no alias is already set
                alias vi >/dev/null 2>&1 || alias vi=vim
              fi' > /etc/profile.d/vim.sh
              systemctl enable docker
              systemctl start docker
              usermod -aG docker ec2-user
              docker run -itd --name nginx -p 80:80 nginx

  Primary2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIID
      InstanceType: t3.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          Description: Primary2 ENI
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetA
          DeviceIndex: 0
      IamInstanceProfile: !Ref EC2InstanceProfile
      SourceDestCheck: false
      KeyName: !Ref SSHPemFilename
      Tags:
        - Key: Name
          Value: primary2
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            LOG=/var/log/user-data.log
            touch $LOG
            exec >> $LOG 2>&1
              yum update -y
              yum install -y docker git
              mkdir -p /etc/vim/undo
              mkdir -p /etc/vim/backup
              rm /etc/vimrc
              curl -L https://raw.githubusercontent.com/tuimac/tools/master/vim/vimrc -o /etc/vimrc
              chmod -R 777 /etc/vim
              echo 'if [ -n "$BASH_VERSION" -o -n "$KSH_VERSION" -o -n "$ZSH_VERSION" ]; then
                [ -x /usr/bin/id ] || return
                ID=`/usr/bin/id -u`
                #[ -n "$ID" -a "$ID" -le 200 ] && return
                # for bash and zsh, only if no alias is already set
                alias vi >/dev/null 2>&1 || alias vi=vim
              fi' > /etc/profile.d/vim.sh
              systemctl enable docker
              systemctl start docker
              usermod -aG docker ec2-user
              docker run -itd --name nginx -p 80:80 nginx

  Secondary1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIID
      InstanceType: t3.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          Description: Secondary1 ENI
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetB
          DeviceIndex: 0
      IamInstanceProfile: !Ref EC2InstanceProfile
      SourceDestCheck: false
      KeyName: !Ref SSHPemFilename
      Tags:
        - Key: Name
          Value: secondary1
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            LOG=/var/log/user-data.log
            touch $LOG
            exec >> $LOG 2>&1
              yum update -y
              yum install -y docker git
              mkdir -p /etc/vim/undo
              mkdir -p /etc/vim/backup
              rm /etc/vimrc
              curl -L https://raw.githubusercontent.com/tuimac/tools/master/vim/vimrc -o /etc/vimrc
              chmod -R 777 /etc/vim
              echo 'if [ -n "$BASH_VERSION" -o -n "$KSH_VERSION" -o -n "$ZSH_VERSION" ]; then
                [ -x /usr/bin/id ] || return
                ID=`/usr/bin/id -u`
                #[ -n "$ID" -a "$ID" -le 200 ] && return
                # for bash and zsh, only if no alias is already set
                alias vi >/dev/null 2>&1 || alias vi=vim
              fi' > /etc/profile.d/vim.sh
              systemctl enable docker
              systemctl start docker
              usermod -aG docker ec2-user
              docker run -itd --name nginx -p 80:80 nginx

  Secondary2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIID
      InstanceType: t3.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          Description: Secondary1 ENI
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetB
          DeviceIndex: 0
      IamInstanceProfile: !Ref EC2InstanceProfile
      SourceDestCheck: false
      KeyName: !Ref SSHPemFilename
      Tags:
        - Key: Name
          Value: secondary1
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            LOG=/var/log/user-data.log
            touch $LOG
            exec >> $LOG 2>&1
              yum update -y
              yum install -y docker git
              mkdir -p /etc/vim/undo
              mkdir -p /etc/vim/backup
              rm /etc/vimrc
              curl -L https://raw.githubusercontent.com/tuimac/tools/master/vim/vimrc -o /etc/vimrc
              chmod -R 777 /etc/vim
              echo 'if [ -n "$BASH_VERSION" -o -n "$KSH_VERSION" -o -n "$ZSH_VERSION" ]; then
                [ -x /usr/bin/id ] || return
                ID=`/usr/bin/id -u`
                #[ -n "$ID" -a "$ID" -le 200 ] && return
                # for bash and zsh, only if no alias is already set
                alias vi >/dev/null 2>&1 || alias vi=vim
              fi' > /etc/profile.d/vim.sh
              systemctl enable docker
              systemctl start docker
              usermod -aG docker ec2-user
              docker run -itd --name nginx -p 80:80 nginx




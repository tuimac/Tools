AWSTemplateFormatVersion: 2010-09-09
Description: Create AWS Client VPN

Parameters:

Resources:
  # VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/28
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  # Subnet
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.0.0/28
      AvailabilityZone: ap-northeast-3a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # RouteTable
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTableAccociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref AWS::StackName
      GroupDescription: For AWS Client VPN
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Sub 10.0.0.0/28
          Description: Allow from VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow to anywhere
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # IAM Role
  CreateACMLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${StackName}_CreateACMLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${StackName}_CreateACMLambdaRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'route53:ListHostedZonesByName'
                Resource:
                  - '*'

  CreateACMLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Timeout: 60
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CreateACMLambdaRole.Arn
      FunctionName: !Sub ${StackName}_CreateACM
      Code:
        ZipFile: |
          import json
          import traceback
          import cfnresponse
          import boto3
          def handler(event, context):
            response = {}
            try:
              route53 = boto3.client('route53')
              domain = event['ResourceProperties']['DomainName']
              response['HostedZoneId'] = route53.list_hosted_zones_by_name(
                DNSName = domain
              )['HostedZones'][0]['Id'].replace('/hostedzone/', '')
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
              return
            except:
              cfnresponse.send(event, context, cfnresponse.FAILED, response)
              return

  CreateACM:
    Type: Custom::CreateACM
    Properties:
      ServiceToken: !GetAtt CreateACMLambda.Arn